// Autogenerated from Pigeon (v9.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.share;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class AppShare {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ShareBody {
    private @Nullable String mTitle;

    public @Nullable String getMTitle() {
      return mTitle;
    }

    public void setMTitle(@Nullable String setterArg) {
      this.mTitle = setterArg;
    }

    /** 内容 */
    private @Nullable String mContent;

    public @Nullable String getMContent() {
      return mContent;
    }

    public void setMContent(@Nullable String setterArg) {
      this.mContent = setterArg;
    }

    /** 缩略图链接 */
    private @Nullable String mThumbUrl;

    public @Nullable String getMThumbUrl() {
      return mThumbUrl;
    }

    public void setMThumbUrl(@Nullable String setterArg) {
      this.mThumbUrl = setterArg;
    }

    /** 网页分享的连接地址 */
    private @Nullable String mUrl;

    public @Nullable String getMUrl() {
      return mUrl;
    }

    public void setMUrl(@Nullable String setterArg) {
      this.mUrl = setterArg;
    }

    private @Nullable Long shareType;

    public @Nullable Long getShareType() {
      return shareType;
    }

    public void setShareType(@Nullable Long setterArg) {
      this.shareType = setterArg;
    }

    private @Nullable String mLocalPath;

    public @Nullable String getMLocalPath() {
      return mLocalPath;
    }

    public void setMLocalPath(@Nullable String setterArg) {
      this.mLocalPath = setterArg;
    }

    public static final class Builder {

      private @Nullable String mTitle;

      public @NonNull Builder setMTitle(@Nullable String setterArg) {
        this.mTitle = setterArg;
        return this;
      }

      private @Nullable String mContent;

      public @NonNull Builder setMContent(@Nullable String setterArg) {
        this.mContent = setterArg;
        return this;
      }

      private @Nullable String mThumbUrl;

      public @NonNull Builder setMThumbUrl(@Nullable String setterArg) {
        this.mThumbUrl = setterArg;
        return this;
      }

      private @Nullable String mUrl;

      public @NonNull Builder setMUrl(@Nullable String setterArg) {
        this.mUrl = setterArg;
        return this;
      }

      private @Nullable Long shareType;

      public @NonNull Builder setShareType(@Nullable Long setterArg) {
        this.shareType = setterArg;
        return this;
      }

      private @Nullable String mLocalPath;

      public @NonNull Builder setMLocalPath(@Nullable String setterArg) {
        this.mLocalPath = setterArg;
        return this;
      }

      public @NonNull ShareBody build() {
        ShareBody pigeonReturn = new ShareBody();
        pigeonReturn.setMTitle(mTitle);
        pigeonReturn.setMContent(mContent);
        pigeonReturn.setMThumbUrl(mThumbUrl);
        pigeonReturn.setMUrl(mUrl);
        pigeonReturn.setShareType(shareType);
        pigeonReturn.setMLocalPath(mLocalPath);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(mTitle);
      toListResult.add(mContent);
      toListResult.add(mThumbUrl);
      toListResult.add(mUrl);
      toListResult.add(shareType);
      toListResult.add(mLocalPath);
      return toListResult;
    }

    static @NonNull ShareBody fromList(@NonNull ArrayList<Object> list) {
      ShareBody pigeonResult = new ShareBody();
      Object mTitle = list.get(0);
      pigeonResult.setMTitle((String) mTitle);
      Object mContent = list.get(1);
      pigeonResult.setMContent((String) mContent);
      Object mThumbUrl = list.get(2);
      pigeonResult.setMThumbUrl((String) mThumbUrl);
      Object mUrl = list.get(3);
      pigeonResult.setMUrl((String) mUrl);
      Object shareType = list.get(4);
      pigeonResult.setShareType((shareType == null) ? null : ((shareType instanceof Integer) ? (Integer) shareType : (Long) shareType));
      Object mLocalPath = list.get(5);
      pigeonResult.setMLocalPath((String) mLocalPath);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ShareEnumContainer {
    private @Nullable Long shareType;

    public @Nullable Long getShareType() {
      return shareType;
    }

    public void setShareType(@Nullable Long setterArg) {
      this.shareType = setterArg;
    }

    private @Nullable Long shareStatus;

    public @Nullable Long getShareStatus() {
      return shareStatus;
    }

    public void setShareStatus(@Nullable Long setterArg) {
      this.shareStatus = setterArg;
    }

    private @Nullable Long sharePlatform;

    public @Nullable Long getSharePlatform() {
      return sharePlatform;
    }

    public void setSharePlatform(@Nullable Long setterArg) {
      this.sharePlatform = setterArg;
    }

    public static final class Builder {

      private @Nullable Long shareType;

      public @NonNull Builder setShareType(@Nullable Long setterArg) {
        this.shareType = setterArg;
        return this;
      }

      private @Nullable Long shareStatus;

      public @NonNull Builder setShareStatus(@Nullable Long setterArg) {
        this.shareStatus = setterArg;
        return this;
      }

      private @Nullable Long sharePlatform;

      public @NonNull Builder setSharePlatform(@Nullable Long setterArg) {
        this.sharePlatform = setterArg;
        return this;
      }

      public @NonNull ShareEnumContainer build() {
        ShareEnumContainer pigeonReturn = new ShareEnumContainer();
        pigeonReturn.setShareType(shareType);
        pigeonReturn.setShareStatus(shareStatus);
        pigeonReturn.setSharePlatform(sharePlatform);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(shareType);
      toListResult.add(shareStatus);
      toListResult.add(sharePlatform);
      return toListResult;
    }

    static @NonNull ShareEnumContainer fromList(@NonNull ArrayList<Object> list) {
      ShareEnumContainer pigeonResult = new ShareEnumContainer();
      Object shareType = list.get(0);
      pigeonResult.setShareType((shareType == null) ? null : ((shareType instanceof Integer) ? (Integer) shareType : (Long) shareType));
      Object shareStatus = list.get(1);
      pigeonResult.setShareStatus((shareStatus == null) ? null : ((shareStatus instanceof Integer) ? (Integer) shareStatus : (Long) shareStatus));
      Object sharePlatform = list.get(2);
      pigeonResult.setSharePlatform((sharePlatform == null) ? null : ((sharePlatform instanceof Integer) ? (Integer) sharePlatform : (Long) sharePlatform));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class ShareHostApiCodec extends StandardMessageCodec {
    public static final ShareHostApiCodec INSTANCE = new ShareHostApiCodec();

    private ShareHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ShareBody.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ShareEnumContainer.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ShareBody) {
        stream.write(128);
        writeValue(stream, ((ShareBody) value).toList());
      } else if (value instanceof ShareEnumContainer) {
        stream.write(129);
        writeValue(stream, ((ShareEnumContainer) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * flutter调用 原生端的方法集
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface ShareHostApi {
    /**注册DD */
    @NonNull 
    Boolean registerDD(@NonNull String appId);
    /**判断DD是否安装 */
    @NonNull 
    Boolean isDingTalkInstalled();
    /**注册微信 */
    @NonNull 
    Boolean registerWx(@NonNull String appId, @Nullable String universalLink);

    @NonNull 
    Boolean startShare(@NonNull ShareEnumContainer enumContainer, @NonNull ShareBody shareBody);
    /**微信是否安装 */
    @NonNull 
    Boolean isWechatInstalled();
    /**指定安卓端包名 */
    void configAndroidPackage(@NonNull String packageName);
    /**判断是否支持钉钉分享 */
    void isDingTalkSupportOpenAPI(Result<Boolean> result);

    /** The codec used by ShareHostApi. */
    static MessageCodec<Object> getCodec() {
      return ShareHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ShareHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ShareHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.registerDD", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appIdArg = (String) args.get(0);
                try {
                  Boolean output = api.registerDD(appIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.isDingTalkInstalled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isDingTalkInstalled();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.registerWx", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appIdArg = (String) args.get(0);
                String universalLinkArg = (String) args.get(1);
                try {
                  Boolean output = api.registerWx(appIdArg, universalLinkArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.startShare", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ShareEnumContainer enumContainerArg = (ShareEnumContainer) args.get(0);
                ShareBody shareBodyArg = (ShareBody) args.get(1);
                try {
                  Boolean output = api.startShare(enumContainerArg, shareBodyArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.isWechatInstalled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isWechatInstalled();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.configAndroidPackage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String packageNameArg = (String) args.get(0);
                try {
                  api.configAndroidPackage(packageNameArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ShareHostApi.isDingTalkSupportOpenAPI", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isDingTalkSupportOpenAPI(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class ShareFlutterApiCodec extends StandardMessageCodec {
    public static final ShareFlutterApiCodec INSTANCE = new ShareFlutterApiCodec();

    private ShareFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ShareEnumContainer.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ShareEnumContainer) {
        stream.write(128);
        writeValue(stream, ((ShareEnumContainer) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * 原生端调用flutter的方法集
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class ShareFlutterApi {
    private final BinaryMessenger binaryMessenger;

    public ShareFlutterApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by ShareFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return ShareFlutterApiCodec.INSTANCE;
    }
    /**注册回调 */
    public void registerCallBack(@NonNull ShareEnumContainer enumContainerArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ShareFlutterApi.registerCallBack", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(enumContainerArg)),
          channelReply -> callback.reply(null));
    }
    public void isAppInstallCallBack(@NonNull Boolean isInstallArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ShareFlutterApi.isAppInstallCallBack", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(isInstallArg)),
          channelReply -> callback.reply(null));
    }
    /**分享回调 */
    public void shareCallBack(@NonNull ShareEnumContainer enumContainerArg, @NonNull String messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ShareFlutterApi.shareCallBack", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(enumContainerArg, messageArg)),
          channelReply -> callback.reply(null));
    }
  }
}

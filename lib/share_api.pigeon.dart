// Autogenerated from Pigeon (v9.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class ShareBody {
  ShareBody({
    this.mTitle,
    this.mContent,
    this.mThumbUrl,
    this.mUrl,
    this.shareType,
    this.mLocalPath,
  });

  String? mTitle;

  /// 内容
  String? mContent;

  /// 缩略图链接
  String? mThumbUrl;

  /// 网页分享的连接地址
  String? mUrl;

  int? shareType;

  String? mLocalPath;

  Object encode() {
    return <Object?>[
      mTitle,
      mContent,
      mThumbUrl,
      mUrl,
      shareType,
      mLocalPath,
    ];
  }

  static ShareBody decode(Object result) {
    result as List<Object?>;
    return ShareBody(
      mTitle: result[0] as String?,
      mContent: result[1] as String?,
      mThumbUrl: result[2] as String?,
      mUrl: result[3] as String?,
      shareType: result[4] as int?,
      mLocalPath: result[5] as String?,
    );
  }
}

class ShareEnumContainer {
  ShareEnumContainer({
    this.shareType,
    this.shareStatus,
    this.sharePlatform,
  });

  int? shareType;

  int? shareStatus;

  int? sharePlatform;

  Object encode() {
    return <Object?>[
      shareType,
      shareStatus,
      sharePlatform,
    ];
  }

  static ShareEnumContainer decode(Object result) {
    result as List<Object?>;
    return ShareEnumContainer(
      shareType: result[0] as int?,
      shareStatus: result[1] as int?,
      sharePlatform: result[2] as int?,
    );
  }
}

class _ShareHostApiCodec extends StandardMessageCodec {
  const _ShareHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ShareBody) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ShareEnumContainer) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ShareBody.decode(readValue(buffer)!);
      case 129: 
        return ShareEnumContainer.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// flutter调用 原生端的方法集
class ShareHostApi {
  /// Constructor for [ShareHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ShareHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ShareHostApiCodec();

  ///注册DD
  Future<bool> registerDD(String arg_appId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.registerDD', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_appId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  ///判断DD是否安装
  Future<bool> isDingTalkInstalled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.isDingTalkInstalled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  ///注册微信
  Future<bool> registerWx(String arg_appId, String? arg_universalLink) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.registerWx', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_appId, arg_universalLink]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> startShare(ShareEnumContainer arg_enumContainer, ShareBody arg_shareBody) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.startShare', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enumContainer, arg_shareBody]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  ///微信是否安装
  Future<bool> isWechatInstalled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.isWechatInstalled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  ///指定安卓端包名
  Future<void> configAndroidPackage(String arg_packageName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.configAndroidPackage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_packageName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  ///判断是否支持钉钉分享
  Future<bool> isDingTalkSupportOpenAPI() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ShareHostApi.isDingTalkSupportOpenAPI', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class _ShareFlutterApiCodec extends StandardMessageCodec {
  const _ShareFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ShareEnumContainer) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ShareEnumContainer.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// 原生端调用flutter的方法集
abstract class ShareFlutterApi {
  static const MessageCodec<Object?> codec = _ShareFlutterApiCodec();

  ///注册回调
  void registerCallBack(ShareEnumContainer enumContainer);

  void isAppInstallCallBack(bool isInstall);

  ///分享回调
  void shareCallBack(ShareEnumContainer enumContainer, String message);

  static void setup(ShareFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ShareFlutterApi.registerCallBack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ShareFlutterApi.registerCallBack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ShareEnumContainer? arg_enumContainer = (args[0] as ShareEnumContainer?);
          assert(arg_enumContainer != null,
              'Argument for dev.flutter.pigeon.ShareFlutterApi.registerCallBack was null, expected non-null ShareEnumContainer.');
          api.registerCallBack(arg_enumContainer!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ShareFlutterApi.isAppInstallCallBack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ShareFlutterApi.isAppInstallCallBack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isInstall = (args[0] as bool?);
          assert(arg_isInstall != null,
              'Argument for dev.flutter.pigeon.ShareFlutterApi.isAppInstallCallBack was null, expected non-null bool.');
          api.isAppInstallCallBack(arg_isInstall!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ShareFlutterApi.shareCallBack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ShareFlutterApi.shareCallBack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ShareEnumContainer? arg_enumContainer = (args[0] as ShareEnumContainer?);
          assert(arg_enumContainer != null,
              'Argument for dev.flutter.pigeon.ShareFlutterApi.shareCallBack was null, expected non-null ShareEnumContainer.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.ShareFlutterApi.shareCallBack was null, expected non-null String.');
          api.shareCallBack(arg_enumContainer!, arg_message!);
          return;
        });
      }
    }
  }
}
